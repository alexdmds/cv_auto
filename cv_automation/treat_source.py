import os
import re
from openai import OpenAI

# ‚úÖ Configurez votre cl√© API OpenAI ici
client = OpenAI(
    api_key=os.environ.get("OPENAI_API_KEY")  # Assurez-vous que la cl√© API est d√©finie dans les variables d'environnement
)

def load_text_file(file_path):
    """
    Charge le fichier texte brut.
    """
    with open(file_path, 'r', encoding='utf-8') as file:
        raw_text = file.read()
    return raw_text


def clean_text(raw_text):
    """
    Nettoie le texte brut pour supprimer les espaces, tabulations et lignes vides excessives.
    """
    # Supprime les lignes vides multiples et les espaces inutiles
    text = re.sub(r'\n+', '\n', raw_text)  # Supprime les sauts de ligne excessifs
    text = re.sub(r'\t+', ' ', text)  # Remplace les tabulations par des espaces
    text = re.sub(r' +', ' ', text)  # Remplace les multiples espaces par un espace
    text = text.strip()  # Supprime les espaces au d√©but et √† la fin
    return text


def call_openai_to_structure_cv(raw_text):
    """
    Appelle l'API OpenAI pour structurer le texte en format de CV organis√©.
    """
    prompt = f"""
    Tu es un assistant sp√©cialis√© dans la structuration de profils professionnels. 
    Ta mission est d'extraire et de restituer **toutes les informations utiles** du texte brut suivant, de mani√®re compl√®te et concise. 
    Ne te r√©p√®te pas, mais ne laisse **aucune information importante de c√¥t√©**.
    Pr√©sente les informations de mani√®re organis√©e et claire, en respectant la structure suivante :

    1Ô∏è‚É£ **Informations personnelles** :
    - Nom complet 
    - Titre professionnel 
    - E-mail 
    - T√©l√©phone 
    - Localisation (ville, r√©gion, pays) 
    - Liens vers des profils (LinkedIn, GitHub, site personnel, etc.) 

    2Ô∏è‚É£ **Exp√©riences professionnelles** :
    - **Poste occup√©** (intitul√© du poste) 
    - **Entreprise** (nom de l'entreprise) 
    - **Dates pr√©cises** (mois/ann√©e de d√©but et de fin) 
    - **Description concise des missions et projets cl√©s** (mets l'accent sur les r√©sultats ou r√©alisations marquantes) 
    - **Comp√©tences et outils mobilis√©s** (technologies, langages, frameworks, outils utilis√©s) 

    3Ô∏è‚É£ **√âducation** :
    - **Dipl√¥mes obtenus** (nom complet) 
    - **√âcoles ou universit√©s** (nom complet) 
    - **Dates** (mois/ann√©e de d√©but et de fin) 
    - **Sp√©cialisations et majeures** (par exemple, data science, finance, IA, etc.) 
    - **Projets ou travaux notables** (par exemple, m√©moire, projet de recherche, projet acad√©mique significatif) 

    4Ô∏è‚É£ **Comp√©tences techniques** :
    - **Langages de programmation** (Python, SQL, etc.) 
    - **Outils et technologies** (GCP, AWS, BigQuery, etc.) 
    - **Certifications et formations techniques** (AWS Certified, Google Cloud Certification, etc.) 
    - **Frameworks et biblioth√®ques** (Pandas, NumPy, Scikit-learn, etc.) 
    - **Outils de visualisation et d'analyse** (Power BI, Tableau, Looker, etc.) 

    5Ô∏è‚É£ **Langues et centres d'int√©r√™t** :
    - **Langues parl√©es** (indique le niveau : natif, courant, avanc√©, interm√©diaire, etc.) 
    - **Centres d'int√©r√™t et passions** (sport, art, activit√©s extra-professionnelles, engagement associatif, etc.) 

    üí° **R√®gles √† suivre** :
    1Ô∏è‚É£ **Ne r√©p√®te pas les informations** d√©j√† mentionn√©es ailleurs (sauf si elles sont n√©cessaires pour la compr√©hension). 
    2Ô∏è‚É£ Si une information est incompl√®te (exemple : "Data Engineer chez Renault"), n'essaie pas de deviner, mais **indique simplement qu'il manque des informations**. 
    3Ô∏è‚É£ **Ne cr√©e aucune information fictive**. Si une information manque, ne l'invente pas. 
    4Ô∏è‚É£ Ne simplifie pas les descriptions de projets et missions. Sois pr√©cis mais concis. 
    5Ô∏è‚É£ Respecte le format et la structure, avec des titres clairs et des listes organis√©es. 
    6Ô∏è‚É£ Les descriptions de projets doivent se concentrer sur les **r√©sultats, impacts ou livrables concrets**. 

    üîΩ **Voici le texte brut √† structurer** üîΩ
    {raw_text}
    """
    
    print("üîÑ Envoi du texte √† OpenAI pour structuration...")
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}]
        )
        
        # ‚ö†Ô∏è Changement ici : on utilise des attributs au lieu des cl√©s du dictionnaire
        structured_content = response.choices[0].message.content

    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de l'appel √† OpenAI : {e}")
        structured_content = None
    
    return structured_content


def save_to_file(content, output_path):
    """
    Enregistre le contenu structur√© dans un fichier.
    """
    with open(output_path, 'w', encoding='utf-8') as file:
        file.write(content)
    print(f"‚úÖ Fichier structur√© enregistr√© sous : {output_path}")


def main(text_path):
    """
    Fonction principale pour extraire le contenu du fichier texte brut et g√©n√©rer le fichier de sortie.
    """

    #output path reprend le nom du fichier brut et ajoute _structured et le met dans data_intermediate
    output_path = os.path.join('data_intermediate', os.path.basename(text_path).replace('.txt', '_structured.txt'))

    print(f"üìÑ Chargement du texte brut √† partir de {text_path}...")
    raw_text = load_text_file(text_path)
    
    print(f"üîç Nettoyage du texte brut...")
    clean_raw_text = clean_text(raw_text)
    
    print(f"üß† Appel de l'API OpenAI pour structurer le CV...")
    structured_content = call_openai_to_structure_cv(clean_raw_text)
    
    if structured_content:
        print(f"‚úÖ Structure du CV g√©n√©r√©e avec succ√®s.")
        save_to_file(structured_content, output_path)
    else:
        print(f"‚ùå √âchec de la structuration du CV.")
        

if __name__ == "__main__":
    # Chemin du fichier texte brut
    text_path = 'source_data/linkedin_brut.txt'  # Remplacez par le chemin de votre fichier texte
    main(text_path)